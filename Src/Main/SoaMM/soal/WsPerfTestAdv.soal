[Uri("http://www.iit.bme.hu/WsPerfTestAdv")]
namespace WsPerfTestAdv
{
	struct Parameters
	{
		int ByteCount;
		int BoolCount;
		int IntCount;
		int LongCount;
		int FloatCount;
		int DoubleCount;
		int StringCount;
		int DateTimeCount;
		int TimeSpanCount;
		int ValueLength;
		int ListDepth;
		int ListArrayLength;
	}

	struct ByteArray
	{
		byte[] Bytes;
	}

	struct MultiStruct
	{
		ByteArray[] Bytes;
		bool[] Bools;
		int[] Ints;
		long[] Longs;
		float[] Floats;
		double[] Doubles;
		string[] Strings;
		DateTime[] DateTimes;
		TimeSpan[] TimeSpans;
	}

	struct MultiList
	{
		MultiStruct Data;
		MultiList Next;
	}

	interface IWsPerfTest
	{
		void Input(Parameters p, MultiList[] ms);
		MultiList[] Output(Parameters p);
		MultiList[] InputOutput(Parameters p, MultiList[] ms);
	}

	binding Soap11
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11 };
	}

	binding Soap12
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap12 };
	}

	binding Soap11Mtom
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11, MTOM = true };
	}

	binding Soap12Mtom
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap12, MTOM = true };
	}

	binding Soap11Wsa
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11 };
		protocol Addressing { Version = AddressingVersion.Addressing10 };
	}

	binding Soap11WsaWsRm
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11 };
		protocol Addressing { Version = AddressingVersion.Addressing10 };
		protocol ReliableMessaging 
		{
			Version = ReliableMessagingVersion.ReliableMessaging11,
			Delivery = ReliableMessagingDelivery.ExactlyOnce,
			InOrder = true
		};
	}

	binding Soap11WsaWsS
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11 };
		protocol Addressing { Version = AddressingVersion.Addressing10 };
		protocol MutualCertificateSecurity
		{
			AlgorithmSuite = SecurityAlgorithmSuite.TripleDesRsa15,
			HeaderLayout = SecurityHeaderLayout.Strict,
			ProtectionOrder = SecurityProtectionOrder.SignBeforeEncryptAndEncryptSignature
		};
	}

	binding Soap11WsaWsSc
	{
		transport HTTP;
		encoding SOAP { Version = SoapVersion.Soap11 };
		protocol Addressing { Version = AddressingVersion.Addressing10 };
		protocol SecureConversationSecurity
		{
			AlgorithmSuite = SecurityAlgorithmSuite.TripleDesRsa15,
			HeaderLayout = SecurityHeaderLayout.Strict,
			ProtectionOrder = SecurityProtectionOrder.SignBeforeEncryptAndEncryptSignature,
			DerivedKeys = true
		};
		protocol MutualCertificateBootstrap;
	}

	endpoint WsPerfTestSoap11 : IWsPerfTest
	{
		binding Soap11;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap12 : IWsPerfTest
	{
		binding Soap12;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap11Mtom : IWsPerfTest
	{
		binding Soap11Mtom;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap12Mtom : IWsPerfTest
	{
		binding Soap12Mtom;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap11Wsa : IWsPerfTest
	{
		binding Soap11Wsa;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap11WsaWsRm : IWsPerfTest
	{
		binding Soap11WsaWsRm;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap11WsaWsS : IWsPerfTest
	{
		binding Soap11WsaWsS;
		location "http://tempuri.org";
	}

	endpoint WsPerfTestSoap11WsaWsSc : IWsPerfTest
	{
		binding Soap11WsaWsSc;
		location "http://tempuri.org";
	}
}
