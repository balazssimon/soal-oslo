using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
include "GeneratorLib.mcg";
import JavaGenerator;
import XsdWsdlGenerator;
import EclipseCxfGenerator;

configuration
    string NamespaceName = "SoaMetaModel";
	string ClassName = "TomcatCxfGenerator";
    Type InstancesType = typeof(IEnumerable<SoaObject>);
    properties Properties
        string ProjectName = "TomcatProject";
        string ResourcesDir = "../Resources";
        string OutputDir = "../../Output";
        bool NoImplementationDelegates = true;
        bool ThrowNotImplementedException = true;
        bool GenerateProxyFeatureConstructors = false;
        bool GenerateImplementationBase = false;
		string CxfVersion = "2.7.11";
		bool GenerateJksService = true;
		bool GenerateJksClient = true;
    end properties
end configuration

/*
* Main function for creating folders and calling file templates.
*/
function void Main()
	JavaGenerator.Properties.NoImplementationDelegates = Properties.NoImplementationDelegates;
	JavaGenerator.Properties.ThrowNotImplementedException = Properties.ThrowNotImplementedException;
	JavaGenerator.Properties.GenerateProxyFeatureConstructors = Properties.GenerateProxyFeatureConstructors;
	JavaGenerator.Properties.GenerateImplementationBase = Properties.GenerateImplementationBase;

	EclipseCxfGenerator.Properties.ProjectName = Properties.ProjectName;
	EclipseCxfGenerator.Properties.ResourcesDir = Properties.ResourcesDir;
	EclipseCxfGenerator.Properties.OutputDir = Properties.OutputDir;
	EclipseCxfGenerator.Properties.CxfVersion = Properties.CxfVersion;
	EclipseCxfGenerator.Properties.GenerateJksService = Properties.GenerateJksService;
	EclipseCxfGenerator.Properties.GenerateJksClient = Properties.GenerateJksClient;

	Context.SetOutputFolder(Properties.OutputDir);
	Context.CreateFolder("Tomcat");
	// === SERVER ===
	JavaGenerator.Properties.WsdlDirectory = "WEB-INF/wsdl/";
	Context.CreateFolder("Tomcat/" + GetProjectName());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.project");
	Context.Output(EclipseCxfGenerator.Generate_server_project());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.classpath");
	Context.Output(EclipseCxfGenerator.Generate_server_classpath());
	Context.CreateFolder("Tomcat/" + GetProjectName() + "/.settings");
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/.jsdtscope");
	Context.Output(EclipseCxfGenerator.Generate_jsdtscope());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/org.eclipse.jdt.core.prefs");
	Context.Output(EclipseCxfGenerator.Generate_core_prefs());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/org.eclipse.wst.common.component");
	Context.Output(EclipseCxfGenerator.Generate_common_component());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/org.eclipse.wst.common.project.facet.core.xml");
	Context.Output(EclipseCxfGenerator.Generate_facet_core());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/org.eclipse.wst.jsdt.ui.superType.container");
	Context.Output(EclipseCxfGenerator.Generate_superType_container());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/.settings/org.eclipse.wst.jsdt.ui.superType.name");
	Context.Output(EclipseCxfGenerator.Generate_superType_name());

	Context.CreateFolder("Tomcat/" + GetProjectName() + "/build");
	Context.CreateFolder("Tomcat/" + GetProjectName() + "/WebContent");
	Context.SetOutput("Tomcat/" + GetProjectName() + "/WebContent/services.jsp");
	Context.Output(EclipseCxfGenerator.Generate_web_services_jsp());
	Context.CreateFolder("Tomcat/" + GetProjectName() + "/WebContent/META-INF");
	Context.SetOutput("Tomcat/" + GetProjectName() + "/WebContent/META-INF/MANIFEST.MF");
	Context.Output(EclipseCxfGenerator.Generate_MetaInf_Manifest());

	Context.CreateFolder("Tomcat/" + GetProjectName() + "/WebContent/WEB-INF");
	Context.CreateFolder("Tomcat/" + GetProjectName() + "/WebContent/WEB-INF/lib");
	Context.SetOutput("Tomcat/" + GetProjectName() + "/WebContent/WEB-INF/web.xml");
	Context.Output(Generate_web_xml());
	Context.SetOutput("Tomcat/" + GetProjectName() + "/WebContent/WEB-INF/cxf-beans.xml");
	Context.Output(EclipseCxfGenerator.Generate_cxf_xml(true, Properties.GenerateJksService));
	
	Context.CreateFolder("Tomcat/" + GetProjectName() + "/src");
	if (Properties.GenerateJksService)
		Context.SetOutput("Tomcat/" + GetProjectName() + "/src/SecurityCallbackHandler.java");
		Context.Output(EclipseCxfGenerator.Generate_SecurityCallbackHandler(""));
	end if
	if (Properties.GenerateJksService)
		Context.SetOutput("Tomcat/" + GetProjectName() + "/src/server_signature.properties");
		Context.Output(EclipseCxfGenerator.Generate_security_properties("server_keystore.jks"));
		Context.SetOutput("Tomcat/" + GetProjectName() + "/src/server_encryption.properties");
		Context.Output(EclipseCxfGenerator.Generate_security_properties("server_truststore.jks"));
		File.Copy(Properties.ResourcesDir+"/Java/server_keystore.jks", "Tomcat/" + GetProjectName() + "/src/server_keystore.jks", true);
		File.Copy(Properties.ResourcesDir+"/Java/server_truststore.jks", "Tomcat/" + GetProjectName() + "/src/server_truststore.jks", true);
	end if
	JavaGenerator.Properties.GenerateServerStubs = true;
	JavaGenerator.Properties.GenerateClientProxies = false;
	JavaGenerator.GenerateJavaCode("Tomcat/" + GetProjectName() + "/src");

	Context.CreateFolder("Tomcat/" + GetProjectName() + "/WebContent/WEB-INF");
	Context.SetOutputFolder(Properties.OutputDir+"/Tomcat/" + GetProjectName() + "/WebContent/WEB-INF");
	XsdWsdlGenerator.Properties.OutputDir = Properties.OutputDir+"/Tomcat/" + GetProjectName() + "/WebContent/WEB-INF";
	XsdWsdlGenerator.Properties.GenerateServiceUrl = true;
	XsdWsdlGenerator.Properties.ServiceUrlPattern = "http://localhost:9080/"+GetProjectName()+"/services/{0}";
	loop(Instances->ns:typeof(Namespace))
		XsdWsdlGenerator.GenerateXsdWsdl(ns);
	end loop
	Context.SetOutputFolder(Properties.OutputDir);

	// === CLIENT ===
	JavaGenerator.Properties.WsdlDirectory = "META-INF";
	Context.CreateFolder("Tomcat/" + GetClientProjectName());
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/.project");
	Context.Output(EclipseCxfGenerator.Generate_client_project());
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/.classpath");
	Context.Output(EclipseCxfGenerator.Generate_client_classpath());
	Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/.settings");
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/.settings/org.eclipse.jdt.core.prefs");
	Context.Output(EclipseCxfGenerator.Generate_core_prefs());
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/.settings/org.eclipse.jst.ws.cxf.core.prefs");
	Context.Output(EclipseCxfGenerator.Generate_ws_cxf_core_prefs());

	Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/bin");
	Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/src/META-INF");
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/META-INF/cxf-client.xml");
	Context.Output(EclipseCxfGenerator.Generate_cxf_xml(false, Properties.GenerateJksClient));

	Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/src/META-INF");
	Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/META-INF/MANIFEST.MF");
	Context.Output(EclipseCxfGenerator.Generate_MetaInf_Manifest());

	if (Properties.GenerateJksClient)
		Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/SecurityCallbackHandler.java");
		Context.Output(EclipseCxfGenerator.Generate_SecurityCallbackHandler(""));
	end if
	if (Properties.GenerateJksClient)
		Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/src/META-INF");
		Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/META-INF/client_signature.properties");
		Context.Output(EclipseCxfGenerator.Generate_security_properties("client_keystore.jks"));
		Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/META-INF/client_encryption.properties");
		Context.Output(EclipseCxfGenerator.Generate_security_properties("client_truststore.jks"));
		File.Copy(Properties.ResourcesDir+"/Java/client_keystore.jks", "Tomcat/" + GetClientProjectName() + "/src/META-INF/client_keystore.jks", true);
		File.Copy(Properties.ResourcesDir+"/Java/client_truststore.jks", "Tomcat/" + GetClientProjectName() + "/src/META-INF/client_truststore.jks", true);
	end if
	JavaGenerator.Properties.GenerateServerStubs = false;
	JavaGenerator.Properties.GenerateClientProxies = true;
	JavaGenerator.GenerateJavaCode("Tomcat/" + GetClientProjectName() + "/src");
	loop(Instances->ns:typeof(Namespace))
		Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/src/"+GetPackage(ns).ToLower()+"client");
		Context.SetOutput("Tomcat/" + GetClientProjectName() + "/src/"+GetPackage(ns).ToLower()+"client/Program.java");
		Context.Output(EclipseCxfGenerator.Generate_Program_java(ns));
	end loop

	Context.CreateFolder("Tomcat/" + GetClientProjectName() + "/src/META-INF");
	Context.SetOutputFolder(Properties.OutputDir+"/Tomcat/" + GetClientProjectName() + "/src/META-INF");
	XsdWsdlGenerator.Properties.OutputDir = Properties.OutputDir+"/Tomcat/" + GetClientProjectName() + "/META-INF";
	loop(Instances->ns:typeof(Namespace))
		XsdWsdlGenerator.GenerateXsdWsdl(ns);
	end loop
	Context.SetOutputFolder(Properties.OutputDir);
end function

/*
* Get project name
*/
function string GetProjectName()
    return Properties.ProjectName;
end function

/*
* Get client project name
*/
function string GetClientProjectName()
    return Properties.ProjectName+"Client";
end function

template Generate_web_services_jsp()
<%-- 
    Document   : services
    Created on : Aug 19, 2011, 3:44:15 PM
    Author     : sb
--%>

<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
   "http://www.w3.org/TR/html4/loose.dtd">

<html>
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        <title>JSP Page</title>
    </head>
    <body>
        <h1>List of Services</h1>
[loop(Instances->endpoint:typeof(Endpoint))]
        <a href="[endpoint.Name]?wsdl">[endpoint.Name]</a><br/>
[end loop]
    </body>
</html>
end template


template Generate_web_xml()
<?xml version="1.0" encoding="UTF-8"?>
<web-app
 version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" 
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

</web-app>
end template
